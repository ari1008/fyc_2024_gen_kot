package fr.esgi

import com.google.devtools.ksp.getDeclaredProperties
import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSPropertyDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.google.devtools.ksp.validate
import java.io.OutputStream

class ControllerProcessor(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {
    override fun process(resolver: Resolver): List<KSAnnotated> {
        val symbols = resolver.getSymbolsWithAnnotation(CreateBasicController::class.qualifiedName.toString())
            .filterIsInstance<KSClassDeclaration>()

        if (!symbols.iterator().hasNext()) {
            logger.warn("No other classes found with @CreateBasicController.")
            return emptyList()
        }


        val file = codeGenerator.createNewFile(
            dependencies = Dependencies(false, *resolver.getAllFiles().toList().toTypedArray()),
            packageName = "fr.esgi.generated.controllers",
            fileName = "GeneratedControllers"
        )

        file.write("package fr.esgi.generated.controllers\n\n".toByteArray())
        file.write("// Automatically generated by KSP\n".toByteArray())

        symbols.forEach { classDeclaration ->
            if (!classDeclaration.validate()) return@forEach
            logger.warn("class name: $classDeclaration")
            classDeclaration.accept(ControllerVisitor(file), Unit)
        }

        file.close()

        return symbols.filterNot { it.validate() }.toList()



    }

    inner class ControllerVisitor(private val file: OutputStream) : KSVisitorVoid() {
        override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {

        }

        private fun visitPropertyDeclaration(property: KSPropertyDeclaration,className: String,classNameLower : String, repositoryClassNameLower: String) {

        }
    }
}