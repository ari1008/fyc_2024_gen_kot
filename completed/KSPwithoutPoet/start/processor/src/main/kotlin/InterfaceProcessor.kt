package fr.esgi

import com.google.devtools.ksp.getDeclaredFunctions
import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.google.devtools.ksp.validate
import java.io.OutputStream

class InterfaceProcessor(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {

    override fun process(resolver: Resolver): List<KSAnnotated> {
        logger.warn("InterfaceProcessor starting processing...")
        // Récupérer toutes les classes annotées avec DTOAnnotation
        val symbols = resolver.getSymbolsWithAnnotation(BasicInterfaceImpl::class.qualifiedName.toString())
            .filterIsInstance<KSClassDeclaration>()

        if (!symbols.iterator().hasNext()) {
            logger.warn("No other classes found with @${BasicInterfaceImpl::class.qualifiedName.toString()}")
            return emptyList()
        }

        // Créer un fichier de sortie
        val file: OutputStream = codeGenerator.createNewFile(
            dependencies = Dependencies(false, *resolver.getAllFiles().toList().toTypedArray()),
            packageName = "fr.esgi.generated",
            fileName = "GeneratedBasicImpl"
        )

        // Écrire un header pour le fichier généré
        file.write("package fr.esgi.generated\n\n".toByteArray())
        file.write("// Automatically generated by KSP\n".toByteArray())

        // Parcourir chaque classe annotée
        symbols.forEach { classDeclaration ->
            if (!classDeclaration.validate()) return@forEach
            logger.warn("class name: $classDeclaration")
            classDeclaration.accept(InterfaceVisitor(file), Unit)
        }

        // Fermer le fichier
        file.close()

        return symbols.filterNot { it.validate() }.toList()


    }

    inner class InterfaceVisitor(private val file: OutputStream) : KSVisitorVoid(){
        override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
            val className = classDeclaration.simpleName.asString()
            logger.warn("Generating BasicImpl for class: $className")
            file.write("import fr.esgi.Plane\n".toByteArray())

            // Generation Impl
            file.write("class ${className}Impl : ${className}{\n".toByteArray())

            classDeclaration.getDeclaredFunctions().forEach { function ->
                visitFunctionDeclaration(function, data)
            }

            file.write("\n}".toByteArray())

        }

        override fun visitFunctionDeclaration(function: KSFunctionDeclaration, data: Unit) {
            val funName = function.simpleName.asString()
            logger.warn("looking at class functions")
            file.write("override fun $funName() {".toByteArray())
            file.write("TODO()".toByteArray())
            file.write("\n\n}".toByteArray())

        }
    }

}