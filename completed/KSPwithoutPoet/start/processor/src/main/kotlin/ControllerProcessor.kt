package fr.esgi

import com.google.devtools.ksp.getDeclaredProperties
import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSPropertyDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.google.devtools.ksp.validate
import java.io.OutputStream

class ControllerProcessor(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {
    override fun process(resolver: Resolver): List<KSAnnotated> {
        val symbols = resolver.getSymbolsWithAnnotation(CreateBasicController::class.qualifiedName.toString())
            .filterIsInstance<KSClassDeclaration>()

        if (!symbols.iterator().hasNext()) {
            logger.warn("No other classes found with @CreateBasicController.")
            return emptyList()
        }


        val file = codeGenerator.createNewFile(
            dependencies = Dependencies(false, *resolver.getAllFiles().toList().toTypedArray()),
            packageName = "fr.esgi.generated.controllers",
            fileName = "GeneratedControllers"
        )

        file.write("package fr.esgi.generated.controllers\n\n".toByteArray())
        file.write("// Automatically generated by KSP\n".toByteArray())

        symbols.forEach { classDeclaration ->
            if (!classDeclaration.validate()) return@forEach
            logger.warn("class name: $classDeclaration")
            classDeclaration.accept(ControllerVisitor(file), Unit)
        }

        file.close()

        return symbols.filterNot { it.validate() }.toList()



    }

    inner class ControllerVisitor(private val file: OutputStream) : KSVisitorVoid() {
        override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
            val countNumberOfEntityId = classDeclaration.getDeclaredProperties().count { it ->
                it.annotations.any { it.shortName.asString() == "EntityId" }
            }
            if (countNumberOfEntityId > 1) {
                logger.error("Only one property can be annotated with @EntityId")
                return
            }

            val packageName = classDeclaration.packageName.asString()
            val path = classDeclaration.annotations.find { it.shortName.asString() == "CreateBasicController"}?.arguments?.first()?.value as String
            val className = classDeclaration.simpleName.asString()
            val classNameLower = className.replaceFirstChar { it.lowercase() }

            val controllerClassName = "${className}Controller"
            val repositoryClassName = "${className}Repository"
            val repositoryClassNameLower = repositoryClassName.replaceFirstChar { it.lowercase() }

            logger.warn("Generating Controller for class: $className")

            file.write("import org.springframework.http.HttpStatus\n".toByteArray())
            file.write("import org.springframework.http.ResponseEntity\n".toByteArray())
            file.write("import org.springframework.web.bind.annotation.*\n\n".toByteArray())
            file.write("import $packageName.$className\n".toByteArray())

            file.write("@RestController\n".toByteArray())
            file.write("@RequestMapping(\"$path\")\n".toByteArray())
            file.write("class $controllerClassName(private val $repositoryClassNameLower : $repositoryClassName) {\n\n".toByteArray())

            file.write("\t@PostMapping\n".toByteArray())
            file.write("\t@ResponseStatus(HttpStatus.CREATED)\n".toByteArray())
            file.write("\tfun create${className}(@RequestBody $classNameLower: $className): $className = ${repositoryClassNameLower}.save($classNameLower)\n\n".toByteArray())

            file.write("\t@GetMapping\n".toByteArray())
            file.write("\tfun getAll${className}s(): List<$className> = ${repositoryClassNameLower}.findAll()\n".toByteArray())
            file.write("\n".toByteArray())

            classDeclaration.getDeclaredProperties().forEach { property ->
                visitPropertyDeclaration(property,className, repositoryClassNameLower)
            }
            file.write("}\n".toByteArray())



        }

        private fun visitPropertyDeclaration(property: KSPropertyDeclaration,className: String, repositoryClassNameLower: String) {
            val isAnnotated = property.annotations.any {
                it.shortName.getShortName() == "Id"
            }
            if (isAnnotated) {
                val propName = property.simpleName.asString()
                val propType = property.type.resolve().declaration.simpleName.asString()
                file.write("\t@GetMapping(\"/{$propName}\")\n".toByteArray())
                file.write(("\tfun get${className}ById(@PathVariable $propName: $propType): $className? =\n" +
                        "\t\t$repositoryClassNameLower.findById($propName).orElse(null)").toByteArray())

                file.write("\n\n".toByteArray())
                file.write("\t@PutMapping(\"/{$propName}\")\n".toByteArray())
                file.write(("\tfun update${className}(@PathVariable $propName: $propType, @RequestBody $className: $className): $className? {\n").toByteArray())
                file.write("\t\treturn if($repositoryClassNameLower.existsById($propName)){\n".toByteArray())
                file.write("\t\t\t$repositoryClassNameLower.save($className.copy(id = $propName))\n".toByteArray())
                file.write("\t\t} else null\n".toByteArray())

                file.write("\t}\n".toByteArray())

            }
        }
    }
}